application {
  config {
    applicationType monolith
    authenticationType jwt
    baseName testAppOne
    blueprints []
    buildTool maven
    cacheProvider ehcache
    clientFramework angularX
    clientPackageManager npm
    clientTheme none
    creationTimestamp 1629828268927
    databaseType sql
    devDatabaseType mysql
    dtoSuffix DTO
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation false
    jhiPrefix jhi
    jhipsterVersion "7.1.0"
    jwtSecretKey "ZGNlYTg3YTQ5NmQ1Yjk4ODgzMTRiOGU0NDgzMGQxMmJhMjczYjA1NWQ1OTMzMDJkOTNiN2NlMzU0MzNlNGE3MTA1MTgyMjY4M2RjMWMzYjU0NThlYWM1NWVkYmQzNDRjN2NlOWY1YWQ5NTdiMjQ1ZWMzOTQwNmQ1Y2YxMzdhZTc="
    languages [en, fr]
    messageBroker false
    nativeLanguage en
    otherModules []
    packageName com.hepaestus.testappone
    prodDatabaseType mysql
    reactive false
    searchEngine elasticsearch
    serverPort 8080
    serviceDiscoveryType false
    skipClient false
    skipServer false
    skipUserManagement false
    testFrameworks []
    websocket false
    withAdminUi true
  }
  entities *
}

entity Car {
  make String
  model String
  year LocalDate
}

entity Person {
  name String
}

entity Shoe {
  shoeSize Integer min(4) max(18)
}

entity Driver {
  licenseNumber String required pattern(/^[A-Z][a-z]{6}[0-9]{1}/)
}

relationship OneToOne {
  Person{user} to User
  Driver{person(name) required} to Person{driver}
}

relationship ManyToOne {
  Car{driver required} to Driver{car required}
}

relationship ManyToMany {
  Car{passengers} to Person{car}
  Person{shoe} to Shoe{person}
}

dto * with mapstruct
search * with elasticsearch
